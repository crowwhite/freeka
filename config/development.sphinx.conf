
indexer
{
}

searchd
{
  listen = 127.0.0.1:9306:mysql41
  log = /Users/chiragmongia/Documents/Jaspreet/freeka/log/development.searchd.log
  query_log = /Users/chiragmongia/Documents/Jaspreet/freeka/log/development.searchd.query.log
  pid_file = /Users/chiragmongia/Documents/Jaspreet/freeka/log/development.sphinx.pid
  workers = threads
  binlog_path = /Users/chiragmongia/Documents/Jaspreet/freeka/tmp/binlog/development
}

source requirement_core_0
{
  type = mysql
  sql_host = localhost
  sql_user = jaspreet
  sql_pass = vinsol
  sql_db = freeka_development
  sql_sock = /tmp/mysql.sock
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query_pre = SET NAMES utf8
  sql_query = SELECT SQL_NO_CACHE `requirements`.`id` * 3 + 0 AS `id`, requirements.`title` AS `title`, requirements.`details` AS `details`, people.`name` AS `name`, people.`email` AS `email`,  AS `city`, requirements.`id` AS `sphinx_internal_id`, 'Requirement' AS `sphinx_internal_class`, 0 AS `sphinx_deleted`, requirements.`requestor_id` AS `requestor_id`, UNIX_TIMESTAMP(requirements.`created_at`) AS `created_at`, UNIX_TIMESTAMP(requirements.`updated_at`) AS `updated_at` FROM `requirements` LEFT OUTER JOIN `people` ON `people`.`id` = `requirements`.`requestor_id` WHERE (`requirements`.`id` BETWEEN $start AND $end) GROUP BY `requirements`.`id`, requirements.`title`, requirements.`details`, people.`name`, people.`email`, , requirements.`id`, requirements.`requestor_id`, requirements.`created_at`, requirements.`updated_at`  ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`requirements`.`id`), 1), IFNULL(MAX(`requirements`.`id`), 1) FROM `requirements`
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_uint = requestor_id
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_attr_string = sphinx_internal_class
  sql_field_string = title
  sql_query_post_index = UPDATE `requirements` SET `delta` = 0 WHERE `delta` = 1
  sql_query_info = SELECT `requirements`.* FROM `requirements`  WHERE (`requirements`.`id` = ($id - 0) / 3)
}

index requirement_core
{
  type = plain
  path = /Users/chiragmongia/Documents/Jaspreet/freeka/db/sphinx/development/requirement_core
  docinfo = extern
  charset_type = utf-8
  source = requirement_core_0
}

source requirement_delta_0
{
  type = mysql
  sql_host = localhost
  sql_user = jaspreet
  sql_pass = vinsol
  sql_db = freeka_development
  sql_sock = /tmp/mysql.sock
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query_pre = SET NAMES utf8
  sql_query = SELECT SQL_NO_CACHE `requirements`.`id` * 3 + 0 AS `id`, requirements.`title` AS `title`, requirements.`details` AS `details`, people.`name` AS `name`, people.`email` AS `email`,  AS `city`, requirements.`id` AS `sphinx_internal_id`, 'Requirement' AS `sphinx_internal_class`, 0 AS `sphinx_deleted`, requirements.`requestor_id` AS `requestor_id`, UNIX_TIMESTAMP(requirements.`created_at`) AS `created_at`, UNIX_TIMESTAMP(requirements.`updated_at`) AS `updated_at` FROM `requirements` LEFT OUTER JOIN `people` ON `people`.`id` = `requirements`.`requestor_id` WHERE (`requirements`.`delta` = 1 AND `requirements`.`id` BETWEEN $start AND $end) GROUP BY `requirements`.`id`, requirements.`title`, requirements.`details`, people.`name`, people.`email`, , requirements.`id`, requirements.`requestor_id`, requirements.`created_at`, requirements.`updated_at`  ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`requirements`.`id`), 1), IFNULL(MAX(`requirements`.`id`), 1) FROM `requirements`  WHERE (`requirements`.`delta` = 1)
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_uint = requestor_id
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_attr_string = sphinx_internal_class
  sql_field_string = title
  sql_query_info = SELECT `requirements`.* FROM `requirements`  WHERE (`requirements`.`id` = ($id - 0) / 3)
}

index requirement_delta
{
  type = plain
  path = /Users/chiragmongia/Documents/Jaspreet/freeka/db/sphinx/development/requirement_delta
  docinfo = extern
  charset_type = utf-8
  source = requirement_delta_0
}

index requirement
{
  type = distributed
  local = requirement_core
  local = requirement_delta
}
